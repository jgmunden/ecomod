

require(Rcpp)
sourceCpp( rebuild=TRUE, code='
#include <RcppArmadillo.h>
//[[Rcpp::depends(RcppArmadillo)]]
//[[Rcpp::export]]
using namespace Rcpp;

List tt0 ( List p, List res ) {

    RNGScope scope ;

    Function RE("RE");
    // unpack the p and res input data
    List NU = as<List>( p["NU"] ) ;
    int nP = as<int>(p["nP"]) ;
    std::vector<unsigned int> tn0 = as<std::vector<unsigned int> >( p["tn0"] ) ;
    std::vector<double> X = as<std::vector<double> >( res["X"] ) ;
    NumericVector P = as<NumericVector>( res["P"] ) ;
    double Ptotal = as<double>( res["P.total"] ) ;
    int nevaluations = as<int> (res["nevaluations"]) ;

    int nr = as<int>( p["nr"] ) ;
    int nc = as<int>( p["nc"] ) ;
    int nrc = as<int>( p["nrc"] ) ;

    int nr_1 = nr -1 ;
    int nc_1 = nc - 1 ;

    double Xtotal ;
    double tinc ;
    double tnew ;
    double simtime = 0 ;
    
    int i = 0;
    int j = 0;
    int tio = 0 ; 
    int tout = 0 ;
    int tend = as<int>( p["monitor"] ) ;
    int nsimultaneous_picks = as<int>(p["nsimultaneous.picks"]) ;
    int nt = nsimultaneous_picks ;
    int cr = 0 ;
    int cc = 0 ;
    int jn = 0 ;
    int ii=0; 
    int ro = 0 ;
    int co = 0 ;

    NumericVector o;
    int osize ;

    int ix;
    int ip;
    
    std::vector<unsigned int> tn ;
    NumericVector time_increment (nsimultaneous_picks) ;  // storage of proposed time increments
    std::vector<double> cumtn (nsimultaneous_picks) ; // CDF of time increments
    NumericVector reactions_choice(nsimultaneous_picks) ;  // storage of proposed reaction channel
    std::vector<double> tic (nsimultaneous_picks) ;
    std::vector<double> rn ;
    NumericVector prop (nP) ;
    std::vector<double> cumprop( nP ) ; // container for the CDF
    std::vector<unsigned int> J(nsimultaneous_picks) ; // randomly chosen cells, weighted by probabilities encoded in the CDF of propensities
    
        // begin with default dimensions and indices
        nt = nsimultaneous_picks ;
        tn = tn0 ;

        // choose reaction times
        time_increment = rexp(nt, Ptotal) ;
        tic = as< std::vector < double> > ( time_increment ); 

        // sum the time proposals
        tinc = std::accumulate( tic.begin(), tic.end(), 0.0) ; 
        tnew = simtime + tinc ;

        tout = 0.5; 
        // if overshoot time to output, truncate and modify indices and length dimensions of choices
            std::partial_sum( tic.begin(), tic.end(), cumtn.begin() );  // compute CDF
            i=0 ;
            while (i < nt) {
              if ( cumtn[i] > tout ) break ;
              ++i ;
            }
            
            i=4000;

            tn.resize(i) ;
            nt = i ; 
            tic.resize(i); 
            tinc = std::accumulate( tic.begin(), tic.end(), 0.0 ) ; // sum the time increment proposals
            tnew = simtime + tinc ;
      
          // choose reactions 
            reactions_choice = runif( nt ) ;
            rn =  as< std::vector < double> > (reactions_choice ); 

            prop = P/Ptotal ;
            std::partial_sum( prop.begin(), prop.end(), cumprop.begin() );  // compute CDF
            j=0 ;
            i=0 ;
            std::sort(rn.begin(), rn.end());
            while( i < nt ) {  // cycle over random numbers and classify reaction in sequence
              while ( j < nP &&  i < nt ) {
                  if ( rn[i] < cumprop[j] ) { 
                      J[i] = j+1 ;   // +1 as C uses 0 as first index
                      ++i ;
                  } else {
                      ++j ;
                  }
              }
              ++j ;
            }
        // remap random element to correct location and process
          //  for ( int w=0 ; w < nt ; ++w ) {
                // determine focal cell coords in P
          int w = 1; 

           // determine focal cell coords in P
                
                ii = J[w] ;
                cr =  ii % nr;              // -- row no
                cc = (ii/nr) % nc;          // -- col no
          //      jn =  ii / nrc ;         // -- processes np
            
            jn=4 ;
                o = NU( jn ) ;
                osize = o.size() / 3 ;

          int m = 2; 

         //       for ( int m=0; m<osize; ++m) {
                 
                  // determine new candidate locations 
                  ro = cr + o( m*3  );  // # row of the focal cell
                  co = cc + o( m*3 + 2 ) ; // # column of the focal cell
                  
                  //# ensure boundary conditions are sane (reflective boundary conditions)
                  if (ro < 1) ro=1 ;
                  if (ro > nr) ro=nr_1 ;

                  if (co < 1) co=1 ;
                  if (co > nc) co = nc_1; 

                  // state and P vector indices
                  ix = ro + (co * nr); 
                  ip = ro + (co * nr) + (jn-1) * nrc ;

                  // update state space
                  X[ix] = X[ix] + o( m*3 + 4 ) ;

                  // update state space and associated propensities in cells where state has changed, etc
                  // P[ip] = RE( p, X=XX, ix=ix ) ;

         //       } // end for m


            Ptotal = std::accumulate( P.begin(), P.end(), 0.0 ) ; // sum the time increment proposals
            simtime = tnew ;
            nevaluations =+ nt ;


    List out; 
    out["cr"] = cr ; 
    out["cc"] = cc ; 
    out["jn"] = jn ; 
    out["o"] = o  ;
    out["ro"] = ro  ;
    out["co"] = co  ;
    
    return(out);
}')
    
  

     
l=tt0(p,res)
l
   



 
require(Rcpp)
sourceCpp( rebuild=TRUE, code='
#include <RcppArmadillo.h>
//[[Rcpp::depends(RcppArmadillo)]]
//[[Rcpp::export]]
using namespace Rcpp;

List tt0 ( int ii, List p, Function RE ) {

  // Function RE("RE");
  
  int nr = 5; 
  int nc = 8;
  int nrc = nr*nc ;
  int nr_1 = nr-2 ;
  int nc_1 = nc-2 ;
  int cc ;
  int cr ; 
  int jn ;
  int ro ;
  int co ;
  int ix;
  int ip;
  
  int J ;
          
  NumericVector X;
  X = runif(100); 

  // C++ indices: row-major starting at 0 ..  http://en.wikipedia.org/wiki/Row-major_order
  // R indices: col-major order indices starting at 1 

  J = ii-1 ; // convert to C-indexing starting at 0

  cr =  J % nr;   // these indices also begin from 0
  cc =  (J/nr) % nc;    
  jn =  J / nrc ;       
     

  ro = cr ;  // # row of the focal cell
  co = cc  ; // # column of the focal cell
                    
  //# ensure boundary conditions are sane (reflective boundary conditions)
  // if (ro < 0) ro=1 ;
  // if (ro >= nr) ro=nr_1 ;

  //if (co < 0) co=1 ;
  //if (co >= nc) co = nc_1; 

  ix = ro + (co * nr); 
  ip = ro + (co * nr) + jn * nrc ;
  
  NumericVector P = RE(p, X[ix], ix);

    List out; 
    out["cr"] = cr ; 
    out["cc"] = cc ; 
    out["jn"] = jn ; 
    out["ro"] = ro  ;
    out["co"] = co  ;
    out["ix"] = ix  ;
    out["ip"] = ip  ;
    out["P"] = P  ;
    
    return(out);
}')
   


   tt0(10, p, p$RE)

