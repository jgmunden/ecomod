
# Using Rcpp/C++ build correct row, col indices and associated operations for state space and propensity calculations .. using floating point operations is faster than integer comparisons!

require(Rcpp)

sourceCpp( rebuild=TRUE, code='
#include <Rcpp.h>
#include<string>
#include<iostream>
#include<algorithm>

using namespace Rcpp;

// [[Rcpp::export]]
bool is_zero (int y) { return(y==0); } // integer math used below


// [[Rcpp::export]]
bool is_almost_zero (double y) {
  const double eps = 1e-6;
  return( fabs(y) < eps );
}


// [[Rcpp::plugins("cpp11")]]  
// [[Rcpp::export]]
List reaction_locations ( int nsp, NumericVector probs, std::vector<double> NU, int nr, int nc, int np ) {

  // sample n=nsp indices ranging from (1...nprobs) weighted by probabilities 
  // without replacement .. about 500X faster than using sample
  // then remap random elements to correct location and process
  // C is row-major order (rows filled first); but R matrix and array functions fill in col-major (col first)
  // so the following formulae are modified from the standard indexing methods

  RNGScope scope ;

  List out ;

  const int nrc = nr * nc;
  const int nc0 = 1 ;  // boundaries using C-indices 
  const int nc1 = nc-2 ; 
  const int nr0 = 1 ;
  const int nr1 = nr-2 ;
  const int plen = 6 ; // number of elements in NU for each process 3 (r,c,oper) X 2 (focal, neighbour)

  int  i, j, k, jj, cr, cc, jn, jnplen, oi, op, w, v, ro, co, nix;  

  std::vector<int> ix(nsp*2, 0) ;  // faster to pre-allocate rather than using pointers!!! 
  std::vector<double> xo(nsp*2, 0) ;  // X 2 as eAch point can have two locations of interactions
  std::vector<int> NUi( NU.begin(), NU.end()) ; // take an integer copy for integer row/col operations

  // random selection of locations and processes weighted by associated probabilities 
  // weights accounted by selection from CDF and selecting using a random uniform number
  const int nprobs = probs.size() ;
  std::vector<double> cumprobs( nprobs ) ; // container for the CDF
  std::partial_sum( probs.begin(), probs.end(), cumprobs.begin() );  // compute CDF
  
  std::vector<double> rn =  as< std::vector < double> > ( runif( nsp ) ); 
  std::sort(rn.begin(), rn.end()); // sorting speeds up search/selection

  k=0 ;
  j=0 ;
  i=0 ;
  
  while( i < nsp ) {  // cycle over random numbers and classify reaction in sequence
  while ( j < nprobs &&  i < nsp ) {
        if ( rn[i] < cumprobs[j] ) { // then j is the candidate index of the reaction process
            // focal cell coords in P
            ++i ;
            // jn =  j / nrc ;      // -- process no
            jj =  j - (j / nrc) * nrc ;   // -- index number in X .. remember, this is integer division
            cc =  jj / nr ;         //    -- col no
            cr =  jj - cc*nr ;      //    -- row no 
            jnplen = (j / nrc) * plen ;
            for ( v = 0; v < 2; ++v ) {
                oi = jnplen + v*3 ;   // starting index of operations from jn
                // determine new operations and candidate locations 
                if ( is_almost_zero( NU[oi+2] ) ) continue ; 
                ro = cr + NUi[oi]   ; // row of the focal cell  ; C-indices 
                co = cc + NUi[oi+1] ; // column of the focal cell
                // ensure boundary conditions are sane (reflective boundary conditions)
                // these are now R-indices)
                if (ro < 1) ro=nr0 ;
                if (ro >= nr) ro=nr1 ;
                if (co < 1) co= nc0 ;
                if (co >= nc) co = nc1 ; 
                // add operations to output indices
                ix[k] =  ro + co*nr + 1  ;  // convert the index value for X as an R-index (+1)
                xo[k] =  NU[oi+2] ;
                ++k ;
            } 
        } else {
            ++j ;
        }
  }
  ++j ;
  }

  nix = k ;  // size of ix and xo
  ix.resize(nix) ;
  xo.resize(nix) ;

  // identify and check for duplicated reactions and compile them into simple vector operations
  // search subsequent elements for a match
  std::vector<int> todelete;  
  for ( std::vector<int>::size_type w=0; w != nix; w++) {
    if ( ix[w] > 0 ) {
      for ( std::vector<int>::size_type v=w+1; v != nix; ++v ) {  
        if ( ix[w] == ix[v] ) { 
          xo[w] += xo[v] ; 
          xo[v] = 0 ; 
        }
      }
    } 
    if ( is_almost_zero( xo[w] ))  ix[w] = 0  ;
  }
  
  xo.erase( remove_if( xo.begin(), xo.end(), is_almost_zero), xo.end() ) ;
  ix.erase( remove_if( ix.begin(), ix.end(), is_zero), ix.end() ) ;

  // ix complete, now re-create ip (iprow, ipcol, ipreactionchanel )
  nix = ix.size() ;  // update
  std::vector<int> ip( nix*np ) ;  
  i=0;
  for ( w=0; w < np; ++w) {
  for ( v=0; v < nix ; ++v ) {
     ip[i] = ix[v] + w*nrc  ;
     ++i;
  }}

  out["xo"] = xo ;
  out["ix"] = ix ;
  out["ip"] = ip ;
  
  return( out );

}')




